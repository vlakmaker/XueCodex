"use strict";(self.webpackChunkxuecodex=self.webpackChunkxuecodex||[]).push([[8863],{1397:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"topics/ai-fundamentals/search-problem","title":"Search Problem Summary","description":"\ud83e\udded Search Problem Summary","source":"@site/docs/topics/ai-fundamentals/search-problem.md","sourceDirName":"topics/ai-fundamentals","slug":"/topics/ai-fundamentals/search-problem","permalink":"/docs/topics/ai-fundamentals/search-problem","draft":false,"unlisted":false,"editUrl":"https://github.com/vlakmaker/XueCodex/tree/main/docs/topics/ai-fundamentals/search-problem.md","tags":[{"inline":true,"label":"ai-fundamentals","permalink":"/docs/tags/ai-fundamentals"},{"inline":true,"label":"search","permalink":"/docs/tags/search"},{"inline":true,"label":"beginner","permalink":"/docs/tags/beginner"}],"version":"current","frontMatter":{"id":"search-problem","title":"Search Problem Summary","tags":["ai-fundamentals","search","beginner"]},"sidebar":"tutorialSidebar","previous":{"title":"Search Algorithms in AI","permalink":"/docs/topics/ai-fundamentals/search-algorithms"},"next":{"title":"What is Superintelligence?","permalink":"/docs/topics/ai-fundamentals/Superintelligence"}}');var r=s(4848),i=s(8453);const l={id:"search-problem",title:"Search Problem Summary",tags:["ai-fundamentals","search","beginner"]},a=void 0,o={},c=[{value:"\ud83e\udded <strong>Search Problem Summary</strong>",id:"-search-problem-summary",level:2},{value:"\ud83e\udde0 Key Concepts",id:"-key-concepts",level:2},{value:"\ud83d\udce6 Node Data Structure",id:"-node-data-structure",level:2},{value:"\ud83d\udd04 Basic Search Algorithm (Uninformed Search)",id:"-basic-search-algorithm-uninformed-search",level:2},{value:"\ud83d\udea8 Problem: Repeated States",id:"-problem-repeated-states",level:2},{value:"\u2705 Revised Search Approach (with Explored Set)",id:"-revised-search-approach-with-explored-set",level:2},{value:"\ud83e\uddf1 Data Structures",id:"-data-structures",level:2},{value:"\ud83c\udf1f TL;DR Review List:",id:"-tldr-review-list",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-search-problem-summary",children:["\ud83e\udded ",(0,r.jsx)(n.strong,{children:"Search Problem Summary"})]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"search problem"})," in AI is defined by five key components:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initial State"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Where the agent begins (e.g. position A in a maze)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Actions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The set of choices the agent can take in each state."}),"\n",(0,r.jsxs)(n.li,{children:["Defined as ",(0,r.jsx)(n.code,{children:"ACTIONS(s)"})," \u2192 returns all possible actions from state ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transition Model"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Describes the result of an action."}),"\n",(0,r.jsxs)(n.li,{children:["Defined as ",(0,r.jsx)(n.code,{children:"RESULT(s, a)"})," \u2192 gives the next state after applying action ",(0,r.jsx)(n.code,{children:"a"})," in state ",(0,r.jsx)(n.code,{children:"s"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Goal Test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Checks if the current state satisfies the goal condition."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Path Cost Function"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Assigns a numerical cost to each path \u2014 used to find the optimal solution."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-key-concepts",children:"\ud83e\udde0 Key Concepts"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State"}),": A configuration of the agent and its environment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Space"}),": All possible states reachable from the initial state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": A sequence of actions that gets the agent from the initial to a goal state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimal Solution"}),": The path with the lowest total cost."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-node-data-structure",children:"\ud83d\udce6 Node Data Structure"}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.strong,{children:"node"})," in the search process stores:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The current ",(0,r.jsx)(n.strong,{children:"state"})]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"parent"})," (how you got here)"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"action"})," taken from the parent"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"path cost"})," so far"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-basic-search-algorithm-uninformed-search",children:"\ud83d\udd04 Basic Search Algorithm (Uninformed Search)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Algorithm:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sql\nCopyEdit\n1. Initialize frontier with the initial state.\n2. Loop:\n   a. If frontier is empty \u2192 no solution.\n   b. Remove a node from the frontier.\n   c. If it\u2019s the goal state \u2192 return the solution.\n   d. Else, expand node and add children to frontier.\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-problem-repeated-states",children:"\ud83d\udea8 Problem: Repeated States"}),"\n",(0,r.jsx)(n.p,{children:"Without handling duplicates, the agent can revisit the same state and get stuck (infinite loops, wasted time)."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-revised-search-approach-with-explored-set",children:"\u2705 Revised Search Approach (with Explored Set)"}),"\n",(0,r.jsxs)(n.p,{children:["Adds an ",(0,r.jsx)(n.strong,{children:"explored set"})," to avoid revisiting:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Improved Algorithm:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sql\nCopyEdit\n1. Frontier \u2190 initial state\n2. Explored \u2190 empty set\n3. Loop:\n   a. If frontier is empty \u2192 failure.\n   b. Remove a node.\n   c. If node is goal \u2192 return path.\n   d. Add node to explored.\n   e. Expand node.\n   f. For each child:\n        - If not in explored or frontier \u2192 add to frontier.\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-data-structures",children:"\ud83e\uddf1 Data Structures"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stack (LIFO)"}),": Used in Depth-First Search (DFS)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Queue (FIFO)"}),": Used in Breadth-First Search (BFS)"]}),"\n",(0,r.jsx)(n.li,{children:"More will come soon in advanced strategies."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-tldr-review-list",children:"\ud83c\udf1f TL;DR Review List:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understand what defines a search problem."}),"\n",(0,r.jsx)(n.li,{children:"Know the five elements: initial state, actions, transition model, goal test, path cost."}),"\n",(0,r.jsx)(n.li,{children:"Use explored sets to avoid redundancy."}),"\n",(0,r.jsxs)(n.li,{children:["Search is about ",(0,r.jsx)(n.em,{children:"expanding states"}),", ",(0,r.jsx)(n.em,{children:"tracking paths"}),", and ",(0,r.jsx)(n.em,{children:"finding optimal solutions"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);